#textdomain wesnoth-Undead_Empire

# Macros

#define GENERIC_UNIT_EXCEPT_ON_EASY SIDE TYPE X Y
    [if]
        {VARIABLE_CONDITIONAL difficulty not_equals easy}
        [then]
            {GENERIC_UNIT {SIDE} {TYPE} {X} {Y} } 
        [/then]
    [/if]
#enddef

#define UE_YETI_GOES_BERSERK
    # Questionable how useful this is.
    [micro_ai]
        side=9
        ai_type=goto
        action=add
        # yeti goes to hex 18,22
        ca_id=yeti_goes_to_18_22
        [filter]
            type=Yeti
        [/filter]
        [filter_location]
            x=18
            y=22
            # bigger area is easier to reach
            radius=2
            [filter_radius]
                [not]
                    terrain=!,*^B*,!,W*^*
                [/not]
            [/filter_radius]
        [/filter_location]
        unique_goals=yes
        release_all_units_at_goal=yes
        ignore_enemy_at_goal=yes
    [/micro_ai]
    # Might not be in effect, as the above is active.
    [micro_ai]
        side=9
        ai_type=simple_attack
        action=add
        ca_id=yetis_have_maximum_agression
        [filter]
            type=Yeti
        [/filter]
    [/micro_ai]
#enddef

#define UE_DRAGON_ALTERNATIVE_MOVEMENT
    # [micro_ai]
    #      side=8
    #      ai_type=big_animals
    #      action=add

    #      [filter]
    #          type=Yeti
    #      [/filter]
    #      [filter_location]
    #          x,y=…………………………………………
    #      [/filter_location]
    #      [filter_location_wander]
    #          terrain=!,*^B*,*^V*,Wwf,!,W*^*
    #      [/filter_location_wander]
    #  [/micro_ai]
    [micro_ai]
        side=8
        ai_type=wolves
        action=add
        ca_score=90000 # default value

        [filter]
            type_adv_tree=Fire Dragon
        [/filter]
        [filter_second]
            canrecruit=yes
        [/filter_second]
        # Water terrain is avoided using the side's [ai][avoid] tag
    [/micro_ai]
#enddef

#define UE_DRAGON_PROTECTORS
    [micro_ai]
        side=8
        # Not using them as lurker, but it seems to be the best fitting AI.
        # This tries to get similar behaviour like the Messenger Escort AI,
        # except that the dragon is not a messenger.
        # The objective behind it all is to take advantage of the L5 leadership ability, and to make up for the dragons low hp.
        ai_type=lurkers
        action=add
        # This is after the normal combat CA.
        # These units have been excluded from the combat CA using
        # the attacks aspect, the Fire Dragon was moved by it.
        # Moves next to the dragon, and only attacks while being adjacent to him.
        # Imortant: it must be made sure that the dragon will not move
        # anymore after this ca_score, This would happen if no enemies
        # were in range. This is handled by the other micro AI.
        ca_score=77000
        # Should be removed when the dragon dies.
        ca_id=dragon_protectors

        [filter]
            type_adv_tree=Fire Guardian,Saurian Augur
            # Restrict matching to the ones around, as apparently
            # the fallback micro AI won't be used otherwise.
            [filter_location]
                [filter_adjacent_location]
                    [filter]
                        type=Fire Dragon
                    [/filter]
                [/filter_adjacent_location]
                radius=7
                [filter_radius]
                    [not]
                        terrain=*^X*
                    [/not]
                [/filter_radius]
            [/filter_location]
        [/filter]

        # Moving next to the dragon.
        [filter_location]
            [filter_adjacent_location]
                [filter]
                    type=Fire Dragon
                [/filter]
            [/filter_adjacent_location]
        [/filter_location]
    [/micro_ai]

    # If the dragon cannot be reached in one move, lurkers won't move.
    # Add one more micro ai to handle this.

    [micro_ai]
        side=8
        ai_type=goto
        action=add
        ca_score=25000
        ca_id=dragon_protectors_fallback
        [filter]
            type_adv_tree=Fire Guardian,Saurian Augur
        [/filter]
        # Towards the dragon.
        [filter_location]
            [filter_adjacent_location]
                [filter_adjacent_location]
                    [filter]
                        type=Fire Dragon
                    [/filter]
                [/filter_adjacent_location]
            [/filter_adjacent_location]
        [/filter_location]
        # override side's [ai][avoid] tag
        [avoid][/avoid]
        ignore_enemy_at_goal=yes
        ignore_units=yes
    [/micro_ai]
#enddef

#define UE_RELEASE_DRAGON_PROTECTORS
    [micro_ai]
        side=8
        ai_type=lurkers
        action=delete
        ca_id=dragon_protectors
    [/micro_ai]
    [micro_ai]
        side=8
        ai_type=goto
        action=delete
        ca_id=dragon_protectors_fallback
    [/micro_ai]
    # Fire guardians are still excluded from normal combat.
    [modify_ai]
        side=8
        action=change
        path=aspect[attacks].facet[]
        [facet]
            invalidate_on_gamestate_change=yes
        [/facet]
    [/modify_ai]
    {MODIFY_AI_DELETE_CANDIDATE_ACTION 8 main_loop retreat}
    {MODIFY_AI_DELETE_CANDIDATE_ACTION 8 main_loop retreat_injured}
#enddef

#define UE_ELVISH_LEADER_HEALER_STANDBY
    [micro_ai]
        side=7
        ai_type=coward
        action=add
        ca_score=115000
        ca_id=elvish_coward

        id=healer
        distance=2
        seek_x,seek_y=17,10
        avoid_y=12
        attack_if_trapped=yes
    [/micro_ai]
#enddef

#define UE_ELVISH_LEADER_HEALER
    [micro_ai]
        side=7
        ai_type=coward
        action=delete
        ca_id=elvish_coward
    [/micro_ai]
    [micro_ai]
        side=7
        ai_type=healer_support
        action=add
        ca_id=elvish_healer

        [filter]
            id=healer
        [/filter]
        [filter_second]
            canrecruit=yes
        [/filter_second]
        aggression=0.35 # not null means yes in this case, regardless of number
    [/micro_ai]
#enddef

#define UE_RELEASE_ELVISH_LEADER_HEALER
    [micro_ai]
        side=7
        ai_type=healer_support
        action=delete
        ca_id=elvish_healer
    [/micro_ai]
#enddef

#define UE_DWARVISH_KEEP_BLOCKER
    # Works only if the unit is excluded from the default combat CA.

    [micro_ai]
        side=6
        ai_type=lurkers
        action=add
        # Before recruiting.
        ca_score=300000
        ca_id=dwarvish_keep_blocker_leaving

        # Leaving the keep for the leader.
        [filter]
            id=keepblocker
            [filter_location]
                location_id=6
            [/filter_location]
        [/filter]
        [filter_location]
            terrain=U*^*,T*^*,C*^*
        [/filter_location]
    [/micro_ai]

    [micro_ai]
        side=6
        ai_type=lurkers
        action=add
        # After many things which move the leader, before moving units CA.
        # This is after healing CA, but before capturing villages CA, meaning:
        # - He doesn't go capturing villages.
        # - If injured, he may rather go healing instead of keep-blocking.
        # - If the leader captures a villages, the keep won't be blocked.
        ca_score=75001
        ca_id=dwarvish_keep_blocker_active

        # Occupying the keep hex. May attack from there too.
        [filter]
            id=keepblocker
            [not]
                lua_function=ue.dwavish_leader_is_on_the_keep
            [/not]
            [filter_location]
                [not]
                    location_id=6
                [/not]
            [/filter_location]
        [/filter]
        [filter_location]
            location_id=6
        [/filter_location]
    [/micro_ai]

    [micro_ai]
        side=6
        ai_type=lurkers
        action=add
        ca_score=75000
        ca_id=dwarvish_keep_blocker_idle

        # Idling, enemies may be around.
        [filter]
            id=keepblocker
            lua_function=ue.dwavish_leader_is_on_the_keep
            [filter_location]
                [not]
                    location_id=6
                [/not]
            [/filter_location]
        [/filter]
        # Fighting Area:
        [filter_location]
            terrain=U*^*,T*^*,C*^*,M*^*,V*^*
            # Don't get too far away.
            x=4-10
            y=10-17
        [/filter_location]
        # Stay around the castle on standby:
        [filter_location_wander]
            terrain=U*^*,T*^*
            x=4-10
            y=10-15
        [/filter_location_wander]
    [/micro_ai]
#enddef

#define UE_RELEASE_DWARVISH_KEEP_BLOCKER
    [micro_ai]
        side=6
        ai_type=lurkers
        action=delete
        ca_id=dwarvish_keep_blocker_leaving
    [/micro_ai]
    [micro_ai]
        side=6
        ai_type=lurkers
        action=delete
        ca_id=dwarvish_keep_blocker_active
    [/micro_ai]
    [micro_ai]
        side=6
        ai_type=lurkers
        action=delete
        ca_id=dwarvish_keep_blocker_idle
    [/micro_ai]
    # He's still excluded from normal combat.
    [modify_ai]
        side=6
        action=change
        path=aspect[attacks].facet[]
        [facet]
            invalidate_on_gamestate_change=yes
        [/facet]
    [/modify_ai]
#enddef

#
# This macro places a naga for one side, but assigns it to another
# random ally, if the preffered side is defeated or not played.
# (a.k.a. has no units)
#

#define NAGA_SUPPORT SIDE X Y
    # Is a side defeated or not in use,
    # then this macro assigns the placed unit to
    # another side.
    [if]
        [have_unit]
            side={SIDE}
        [/have_unit]
        [then]
            [unit]
                type=Naga Fighter
                side={SIDE}
                x={X}
                y={Y}
                [modifications]
                    {TRAIT_STRONG}
                    {TRAIT_RESILIENT}
                [/modifications]
            [/unit]
        [/then]
        # The side has no units anymore.
        # Give it to someone else.
        [else]
            # Determine other candidates.
            [store_side]
                variable=active_player_sides
                side=1,2,3,4
                [has_unit]
                [/has_unit]
            [/store_side]

            # Randomly choose one.
            [set_variable]
                name=random
                rand="1..$active_player_sides.length"
            [/set_variable]

            # For a change, place the other naga unit.
            # Check with Lua if it exists, in case it will be renamed.
            [if]
                [lua]
                    code=<<return wesnoth.unit_types['Naga Dirkfang'] == nil>>
                [/lua]
                [then]
                    [unit]
                        type=Naga Fighter
                        # Get the side number of the choosen one.
                        side="$active_player_sides[$($random|-1)].side"
                        x={X}
                        y={Y}
                        [modifications]
                            {TRAIT_STRONG}
                            {TRAIT_RESILIENT}
                        [/modifications]
                    [/unit]
                [/then]
                [else]
                    [unit]
                        type=Naga Dirkfang
                        # Get the side number of the choosen one.
                        side="$active_player_sides[$($random|-1)].side"
                        x={X}
                        y={Y}
                        [modifications]
                            {TRAIT_STRONG}
                            {TRAIT_RESILIENT}
                        [/modifications]
                    [/unit]
                [/else]
            [/if]

            {CLEAR_VARIABLE active_player_sides,random}
        [/else]
    [/if]
#enddef

#
# If this game is not played with 4 players,
# give a level 1 unit to a random player, as
# compensation for having one level 2 leader less.
# Not giving a level 2 unit, as a leader must
# be taken care of and stay around the keep,
# while this unit can go anywhere.
#
# Also capturing one village.
#

#define LEADER_REPLACEMENT SIDE X Y

#arg VILLAGE
#endarg

    [if]
        [not]
            [have_unit]
                side={SIDE}
            [/have_unit]
        [/not]
        [then]
            [store_side]
                variable=active_player_sides
                side=1,2,3,4
                [has_unit]
                [/has_unit]
            [/store_side]

            # Randomly choose one side.
            [set_variable]
                name=random
                rand="1..$active_player_sides.length"
            [/set_variable]

            [set_variable]
                name=random_unit
                rand="Skeleton,Skeleton Archer,Ghoul"
            [/set_variable]

            [unit]
                type=$random_unit
                # Get the side number of the choosen side.
                side="$active_player_sides[$($random|-1)].side"
                x={X}
                y={Y}
                [status]
                    petrified=yes
                [/status]
            [/unit]

            [capture_village]
                x,y={VILLAGE}
                side="$active_player_sides[$($random|-1)].side"
            [/capture_village]

            {CLEAR_VARIABLE active_player_sides,random,random_unit}

            [event]
                name=turn 2 refresh
                id=unpetrify_undead # id to insert just once

                [message]
                    side=1,2,3,4
                    canrecruit=yes
                    [filter_side]
                        [has_unit]
                            status=petrified
                        [/has_unit]
                    [/filter_side]
                    message= _ "Awaken, my undead. We have a mission to fulfil."
                [/message]

                [delay]
                    time=600
                [/delay]

                {FLASH_WHITE ([unpetrify][/unpetrify]) }

                # Maybe not needed:
                [redraw]
                    clear_shroud=yes
                [/redraw]
            [/event]
        [/then]
    [/if]
#enddef

#define INFORM_HOSTING_PLAYER_ABOUT_THE_DIFFICULTY_OPTIONS
    # It's too easy to miss that part of the UI,
    # and most maps don't even use it, so noone
    # expects something there.
    [event]
        name=side 1 turn 1

            {VARIABLE_FROM_GLOBAL ANL saw_difficulty_hint informed 1}

        [if]
            {VARIABLE_CONDITIONAL informed boolean_equals no}
            {VARIABLE_CONDITIONAL difficulty equals normal}
            [then]
                [delay]
                    time=1000
                [/delay]

                {QUAKE ""}
                {QUAKE ""}
                {QUAKE ""}
                {QUAKE ""}
                {QUAKE ""}
                {QUAKE ""}
                {QUAKE ""}

                [delay]
                    time=250
                [/delay]

                [message]
                    side_for=1
                    speaker=narrator
                    image=none
                    caption= _ "Undead Empire has three difficulty levels"
                    message= _ "When creating the game, visit the tab »<b>Custom Options</b>«.

<small>This message will be shown only once.</small>"
                sound=horn-signals/horn-6.ogg
                [/message]

                {VARIABLE informed yes}
                {GLOBAL_VARIABLE ANL informed saw_difficulty_hint 1}
            [/then]
        [/if]
        {CLEAR_VARIABLE informed}
    [/event]
#enddef
